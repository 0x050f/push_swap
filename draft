1 5 2 4 3

-- pb
5 2 4 3				2 0 1
1
-- ra			-- rra
2 4 3 5			3 5 2 4
1				1
-- pb			-- pb
4 3 5			5 2 4
2 1				3 1
-- sa			-- rra
3 4 5			4 5 2
2 1				3 1
-- pa			-- pb
2 3 4 5			5 2
				4 3 1
-- pa			-- sa
1 2 3 4 5		2 5
				4 3 1
				...

3 2 1 0

-- ra
2 1 0 3

-- pb
1 0 3
2
-- pb
0 3
1 2
-- sb
0 3
2 1
-- pb
3
0 2 1
-- rb
3
2 1 0
-- pa
2 3
1 0
-- pa
1 2 3
0
-- pa
0 1 2 3



3 2 1 0

-- rra
0 3 2 1

-- pb
3 2 1
0
-- sa				-- rra
2 3 1				1 3 2
0					0
-- rra				-- pb
1 2 3				3 2
0					1 0
-- pa				-- sa
0 1 2 3				2 3
					1 0
					-- pb
					1 2 3
					0
					-- pb
					0 1 2 3

4 3 2 1 0
-- rra
0 4 3 2 1

-- pb
4 3 2 1
0
-- rra
1 4 3 2
0
-- pb
4 3 2
1 0
-- sa
3 4 2
1 0
-- rra
2 3 4
1 0
-- pa
1 2 3 4
0
-- pa
0 1 2 3 4


5 4 3 2 1 0
-- rra
0 5 4 3 2 1

-- pb
5 4 3 2 1
0
-- rra
1 5 4 3 2
0
-- pb
5 4 3 2
1 0
--rra
2 5 4 3

-- pb






3 1 5 2 4

-- sa
1 3 5 2 4

-- pb
3 5 2 4
1
-- pb
5 2 4
3 1
-- sa		-- rra			-- ra
2 5 4		4 5 2			2 4 5
3 1			3 1				3 1
--			-- pa			-- 
			3 4 5 2
			1
			-- rra
			2 3 4 5
			1
			-- pa





		/*
		if (stack_a->size > 1 && (stack_a->array[0] > stack_a->array[1]) &&
((stack_a->size < 4 && (stack_a->size != 3 ||
(stack_a->array[2] < stack_a->array[1]))) || (stack_a->size > 2 &&
stack_a->array[1] < stack_a->array[2] &&
stack_a->array[2] > stack_a->array[0])))
		{
			swap_stack(stack_a);
			write(STDOUT_FILENO, "sa\n", 3);
		}
		else if (stack_a->size > 2 && (stack_a->array[1] < stack_a->array[0]
|| stack_a->array[0] > stack_a->array[stack_a->size - 1]))
		{
			if (stack_a->array[1] < stack_a->array[stack_a->size - 1])
			{
				rotate_stack(stack_a);
				write(STDOUT_FILENO, "ra\n", 3);
			}
			else
			{
				reverse_rotate_stack(stack_a);
				write(STDOUT_FILENO, "rra\n", 4);
			}
		}
		else if (!stack_a->size || (stack_b->size &&
stack_b->array[0] < stack_a->array[0] && (stack_a->size < 3 ||
stack_a->array[1] < stack_a->array[2])))
		{
			push_stack(stack_a, stack_b);
			write(STDOUT_FILENO, "pa\n", 3);
		}
		else if (!stack_b->size || (stack_a->size &&
stack_a->array[0] > stack_b->array[0]))
		{
			push_stack(stack_b, stack_a);
			write(STDOUT_FILENO, "pb\n", 3);
		}
		else if (stack_b->size)
		{
			if (stack_b->size > 1 && stack_b->array[0] < stack_b->array[1])
			{
				swap_stack(stack_b);
				write(STDOUT_FILENO, "sb\n", 3);
			}
			else if (stack_b->size > 1 && stack_b->array[0] > stack_b->array[stack_b->size - 1])
			{
				reverse_rotate_stack(stack_b);
				write(STDOUT_FILENO, "rrb\n", 4);
			}
			else if (stack_b->size > 1)
			{
				rotate_stack(stack_b);
				write(STDOUT_FILENO, "rb\n", 3);
			}
			else
			{
				rotate_stack(stack_a);
				write(STDOUT_FILENO, "ra\n", 3);
			}
		}
		*/

3 2 1 0
3 0 2 1

3 0 2 1
